{"ast":null,"code":"var _jsxFileName = \"C:\\\\Training\\\\React-and-ASP.NET-Core\\\\Module 6 - Forms\\\\react-movies\\\\src\\\\genres\\\\GenreForm.tsx\";\nimport { Form, Formik } from \"formik\";\nimport Button from \"../utils/Button\";\nimport TextField from \"../forms/TextField\";\nimport { Link } from \"react-router-dom\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GenreForm(props) {\n  /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: ''\n      },\n      onSubmit: async value => {\n        // when the form is posted\n        await new Promise(r => setTimeout(r, 1000));\n        console.log(value);\n      },\n      validationSchema: Yup.object({\n        name: Yup.string().required('This field is required.').firstLetterUppercase()\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        placeholder: undefined,\n        onPointerEnterCapture: undefined,\n        onPointerLeaveCapture: undefined,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          field: \"name\",\n          displayName: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = GenreForm;\nvar _c;\n$RefreshReg$(_c, \"GenreForm\");","map":{"version":3,"names":["Form","Formik","Button","TextField","Link","Yup","jsxDEV","_jsxDEV","Fragment","_Fragment","GenreForm","props","children","initialValues","name","onSubmit","value","Promise","r","setTimeout","console","log","validationSchema","object","string","required","firstLetterUppercase","formikProps","placeholder","undefined","onPointerEnterCapture","onPointerLeaveCapture","field","displayName","fileName","_jsxFileName","lineNumber","columnNumber","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["C:/Training/React-and-ASP.NET-Core/Module 6 - Forms/react-movies/src/genres/GenreForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\r\nimport Button from \"../utils/Button\";\r\nimport TextField from \"../forms/TextField\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\nimport { gemreCreationDTO } from \"./genres.model\";\r\n\r\nexport default function GenreForm(props: genreFormProps) {\r\n    <>\r\n        <Formik initialValues={{\r\n            name: ''\r\n        }}\r\n        onSubmit={async value => {\r\n            // when the form is posted\r\n            await new Promise(r => setTimeout(r, 1000));\r\n            console.log(value);\r\n         }}\r\n         validationSchema={Yup.object({\r\n            name: Yup.string().required('This field is required.').firstLetterUppercase()\r\n         })}\r\n         >\r\n            {(formikProps) => (\r\n                <Form placeholder={undefined} onPointerEnterCapture={undefined} onPointerLeaveCapture={undefined}>\r\n                    <TextField field=\"name\" displayName=\"Name\" />\r\n        \r\n                    <Button disabled={formikProps.isSubmitting} type='submit'>Save Changes</Button>\r\n                    <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </>\r\n}\r\n\r\ninterface genreFormProps {\r\n    model: gemreCreationDTO;\r\n    onSubmit(values: genreCreationDTO, action: FormikHelpers<genreCreationDTO>): void;\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,MAAM,QAAuB,QAAQ;AACpD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG3B,eAAe,SAASC,SAASA,CAACC,KAAqB,EAAE;EACrD,aAAAJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,eACIL,OAAA,CAACN,MAAM;MAACY,aAAa,EAAE;QACnBC,IAAI,EAAE;MACV,CAAE;MACFC,QAAQ,EAAE,MAAMC,KAAK,IAAI;QACrB;QACA,MAAM,IAAIC,OAAO,CAACC,CAAC,IAAIC,UAAU,CAACD,CAAC,EAAE,IAAI,CAAC,CAAC;QAC3CE,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;MACrB,CAAE;MACFM,gBAAgB,EAAEjB,GAAG,CAACkB,MAAM,CAAC;QAC1BT,IAAI,EAAET,GAAG,CAACmB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,yBAAyB,CAAC,CAACC,oBAAoB,CAAC;MAC/E,CAAC,CAAE;MAAAd,QAAA,EAEEe,WAAW,iBACTpB,OAAA,CAACP,IAAI;QAAC4B,WAAW,EAAEC,SAAU;QAACC,qBAAqB,EAAED,SAAU;QAACE,qBAAqB,EAAEF,SAAU;QAAAjB,QAAA,gBAC7FL,OAAA,CAACJ,SAAS;UAAC6B,KAAK,EAAC,MAAM;UAACC,WAAW,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAE7C9B,OAAA,CAACL,MAAM;UAACoC,QAAQ,EAAEX,WAAW,CAACY,YAAa;UAACC,IAAI,EAAC,QAAQ;UAAA5B,QAAA,EAAC;QAAY;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC/E9B,OAAA,CAACH,IAAI;UAACqC,SAAS,EAAC,mBAAmB;UAACC,EAAE,EAAC,SAAS;UAAA9B,QAAA,EAAC;QAAM;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC,gBACX,CAAC;AACP;AAACM,EAAA,GAxBuBjC,SAAS;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}