{"ast":null,"code":"var _jsxFileName = \"C:\\\\Training\\\\React-and-ASP.NET-Core\\\\Module 6 - Forms\\\\react-movies\\\\src\\\\movies\\\\MovieForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport TextField from \"../forms/TextField\";\nimport DateField from \"../forms/DateField\";\nimport ImageField from \"../forms/ImageField\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport CheckboxField from \"../forms/CheckboxField\";\nimport MultipleSelector from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  _s();\n  const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\n  const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\n  const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.model,\n      onSubmit: (values, actions) => {\n        values.genresIds = selectedGenres.map(item => item.key);\n        values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\n        props.onSubmit(values, actions);\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().required('This field is required.').firstLetterUppercase()\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        placeholder: undefined,\n        onPointerEnterCapture: undefined,\n        onPointerLeaveCapture: undefined,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Title\",\n          field: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CheckboxField, {\n          displayName: \"In Theaters\",\n          field: \"inTheaters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Trailer\",\n          field: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DateField, {\n          displayName: \"Release Date\",\n          field: \"releaseDate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n          displayName: \"Poster\",\n          field: \"poster\",\n          imageURL: props.model.posterURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Genres\",\n          nonSelected: nonSelectedGenres,\n          selected: selectedGenres,\n          onChange: (selected, nonSelected) => {\n            setSelectedGenres(selected);\n            setNonSelectedGenres(nonSelected);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Movie Theaters\",\n          nonSelected: nonSelectedMovieTheaters,\n          selected: selectedMovieTheaters,\n          onChange: (selected, nonSelected) => {\n            setSelectedMovieTheaters(selected);\n            setNonSelectedMovieTheaters(nonSelected);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MovieForm, \"fBU0qiUL4uzyr7AE9fPR7M1V2W4=\");\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Form","Formik","Yup","TextField","DateField","ImageField","Button","Link","CheckboxField","MultipleSelector","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieForm","props","_s","selectedGenres","setSelectedGenres","mapToModel","nonSelectedGenres","setNonSelectedGenres","selectedMovieTheaters","setSelectedMovieTheaters","nonSelectedMovieTheaters","setNonSelectedMovieTheaters","items","map","item","key","id","value","name","children","initialValues","model","onSubmit","values","actions","genresIds","movieTheatersIds","validationSchema","object","title","string","required","firstLetterUppercase","formikProps","placeholder","undefined","onPointerEnterCapture","onPointerLeaveCapture","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","posterURL","nonSelected","selected","onChange","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["C:/Training/React-and-ASP.NET-Core/Module 6 - Forms/react-movies/src/movies/MovieForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\r\nimport { movieCreationDTO } from \"./movies.module\";\r\nimport * as Yup from 'yup'\r\nimport TextField from \"../forms/TextField\";\r\nimport DateField from \"../forms/DateField\";\r\nimport ImageField from \"../forms/ImageField\";\r\nimport Button from \"../utils/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CheckboxField from \"../forms/CheckboxField\";\r\nimport MultipleSelector, { multipleSelectorModel } from \"../forms/MultipleSelector\";\r\nimport { useState } from \"react\";\r\nimport { genreDTO } from \"../genres/genres.model\";\r\nimport { movieTheaterDTO } from \"../movietheaters/movieTheater.model\";\r\n\r\nexport default function MovieForm(props: movieFormProps) {\r\n\r\n    const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\r\n    const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\r\n\r\n    const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\r\n    const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\r\n\r\n    function mapToModel(items: { id: number, name: string }[]): multipleSelectorModel[] {\r\n        return items.map(item => {\r\n            return { key: item.id, value: item.name }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props.model}\r\n                onSubmit={(values, actions) => {\r\n                    values.genresIds = selectedGenres.map(item => item.key);\r\n                    values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\r\n                    props.onSubmit(values, actions)\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    title: Yup.string().required('This field is required.').firstLetterUppercase()\r\n                })}\r\n            >\r\n                {(formikProps) => (\r\n                    <Form placeholder={undefined} onPointerEnterCapture={undefined} onPointerLeaveCapture={undefined}>\r\n                        \r\n                        <TextField displayName=\"Title\" field=\"title\" />\r\n                        <CheckboxField displayName=\"In Theaters\" field=\"inTheaters\" />\r\n                        <TextField displayName=\"Trailer\" field=\"trailer\" />\r\n                        <DateField displayName=\"Release Date\" field=\"releaseDate\" />\r\n                        <ImageField displayName=\"Poster\" field=\"poster\"\r\n                            imageURL={props.model.posterURL}\r\n                        />\r\n\r\n                        <MultipleSelector\r\n                            displayName=\"Genres\"\r\n                            nonSelected={nonSelectedGenres}\r\n                            selected={selectedGenres}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedGenres(selected);\r\n                                setNonSelectedGenres(nonSelected);\r\n                            }}\r\n                        />\r\n\r\n                        <MultipleSelector\r\n                            displayName=\"Movie Theaters\"\r\n                            nonSelected={nonSelectedMovieTheaters}\r\n                            selected={selectedMovieTheaters}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedMovieTheaters(selected);\r\n                                setNonSelectedMovieTheaters(nonSelected);\r\n                            }}\r\n                        />\r\n\r\n                        <Button disabled={formikProps.isSubmitting}\r\n                            type='submit'>Save Changes</Button>\r\n                        <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface movieFormProps {\r\n    model: movieCreationDTO;\r\n    onSubmit(values: movieCreationDTO, actions: FormikHelpers<movieCreationDTO>): void;\r\n    selectedGenres: genreDTO[];\r\n    nonSelectedGenres: genreDTO[];\r\n    selectedMovieTheaters: movieTheaterDTO[];\r\n    nonSelectedMovieTheaters: movieTheaterDTO[];\r\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,MAAM,QAAuB,QAAQ;AAEpD,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,gBAAgB,MAAiC,2BAA2B;AACnF,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAIjC,eAAe,SAASC,SAASA,CAACC,KAAqB,EAAE;EAAAC,EAAA;EAErD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAACU,UAAU,CAACJ,KAAK,CAACE,cAAc,CAAC,CAAC;EACtF,MAAM,CAACG,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGZ,QAAQ,CAACU,UAAU,CAACJ,KAAK,CAACK,iBAAiB,CAAC,CAAC;EAE/F,MAAM,CAACE,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGd,QAAQ,CAACU,UAAU,CAACJ,KAAK,CAACO,qBAAqB,CAAC,CAAC;EAC3G,MAAM,CAACE,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGhB,QAAQ,CAACU,UAAU,CAACJ,KAAK,CAACS,wBAAwB,CAAC,CAAC;EAEpH,SAASL,UAAUA,CAACO,KAAqC,EAA2B;IAChF,OAAOA,KAAK,CAACC,GAAG,CAACC,IAAI,IAAI;MACrB,OAAO;QAAEC,GAAG,EAAED,IAAI,CAACE,EAAE;QAAEC,KAAK,EAAEH,IAAI,CAACI;MAAK,CAAC;IAC7C,CAAC,CAAC;EACN;EAEA,oBACIrB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACItB,OAAA,CAACX,MAAM;MACHkC,aAAa,EAAEnB,KAAK,CAACoB,KAAM;MAC3BC,QAAQ,EAAEA,CAACC,MAAM,EAAEC,OAAO,KAAK;QAC3BD,MAAM,CAACE,SAAS,GAAGtB,cAAc,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;QACvDQ,MAAM,CAACG,gBAAgB,GAAGlB,qBAAqB,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;QACrEd,KAAK,CAACqB,QAAQ,CAACC,MAAM,EAAEC,OAAO,CAAC;MACnC,CAAE;MACFG,gBAAgB,EAAExC,GAAG,CAACyC,MAAM,CAAC;QACzBC,KAAK,EAAE1C,GAAG,CAAC2C,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,yBAAyB,CAAC,CAACC,oBAAoB,CAAC;MACjF,CAAC,CAAE;MAAAb,QAAA,EAEDc,WAAW,iBACTpC,OAAA,CAACZ,IAAI;QAACiD,WAAW,EAAEC,SAAU;QAACC,qBAAqB,EAAED,SAAU;QAACE,qBAAqB,EAAEF,SAAU;QAAAhB,QAAA,gBAE7FtB,OAAA,CAACT,SAAS;UAACkD,WAAW,EAAC,OAAO;UAACC,KAAK,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC/C9C,OAAA,CAACJ,aAAa;UAAC6C,WAAW,EAAC,aAAa;UAACC,KAAK,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9D9C,OAAA,CAACT,SAAS;UAACkD,WAAW,EAAC,SAAS;UAACC,KAAK,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACnD9C,OAAA,CAACR,SAAS;UAACiD,WAAW,EAAC,cAAc;UAACC,KAAK,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5D9C,OAAA,CAACP,UAAU;UAACgD,WAAW,EAAC,QAAQ;UAACC,KAAK,EAAC,QAAQ;UAC3CK,QAAQ,EAAE3C,KAAK,CAACoB,KAAK,CAACwB;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eAEF9C,OAAA,CAACH,gBAAgB;UACb4C,WAAW,EAAC,QAAQ;UACpBQ,WAAW,EAAExC,iBAAkB;UAC/ByC,QAAQ,EAAE5C,cAAe;UACzB6C,QAAQ,EAAEA,CAACD,QAAQ,EAAED,WAAW,KAAK;YACjC1C,iBAAiB,CAAC2C,QAAQ,CAAC;YAC3BxC,oBAAoB,CAACuC,WAAW,CAAC;UACrC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEF9C,OAAA,CAACH,gBAAgB;UACb4C,WAAW,EAAC,gBAAgB;UAC5BQ,WAAW,EAAEpC,wBAAyB;UACtCqC,QAAQ,EAAEvC,qBAAsB;UAChCwC,QAAQ,EAAEA,CAACD,QAAQ,EAAED,WAAW,KAAK;YACjCrC,wBAAwB,CAACsC,QAAQ,CAAC;YAClCpC,2BAA2B,CAACmC,WAAW,CAAC;UAC5C;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEF9C,OAAA,CAACN,MAAM;UAAC0D,QAAQ,EAAEhB,WAAW,CAACiB,YAAa;UACvCC,IAAI,EAAC,QAAQ;UAAAhC,QAAA,EAAC;QAAY;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvC9C,OAAA,CAACL,IAAI;UAAC4D,SAAS,EAAC,mBAAmB;UAACC,EAAE,EAAC,SAAS;UAAAlC,QAAA,EAAC;QAAM;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE5D;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC,gBACX,CAAC;AAEX;AAACzC,EAAA,CAnEuBF,SAAS;AAAAsD,EAAA,GAATtD,SAAS;AAAA,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}