{"ast":null,"code":"var _jsxFileName = \"C:\\\\Training\\\\React-and-ASP.NET-Core\\\\Module 6 - Forms\\\\react-movies\\\\src\\\\movies\\\\MovieForm.tsx\",\n  _s = $RefreshSig$();\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport TextField from \"../forms/TextField\";\nimport DateField from \"../forms/DateField\";\nimport ImageField from \"../forms/ImageField\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport CheckboxField from \"../forms/CheckboxField\";\nimport MultipleSelector from \"../forms/MultipleSelector\";\nimport { useState } from \"react\";\nimport TypeAheadActor from \"../forms/TypeAheadActors\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MovieForm(props) {\n  _s();\n  const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\n  const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\n  const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\n  const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\n  const [selectedActors, setSelectedActors] = useState(props.selectedActors);\n  function mapToModel(items) {\n    return items.map(item => {\n      return {\n        key: item.id,\n        value: item.name\n      };\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: props.model,\n      onSubmit: (values, actions) => {\n        values.genresIds = selectedGenres.map(item => item.key);\n        values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\n        props.onSubmit(values, actions);\n      },\n      validationSchema: Yup.object({\n        title: Yup.string().required('This field is required.').firstLetterUppercase()\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        placeholder: undefined,\n        onPointerEnterCapture: undefined,\n        onPointerLeaveCapture: undefined,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Title\",\n          field: \"title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CheckboxField, {\n          displayName: \"In Theaters\",\n          field: \"inTheaters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          displayName: \"Trailer\",\n          field: \"trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DateField, {\n          displayName: \"Release Date\",\n          field: \"releaseDate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ImageField, {\n          displayName: \"Poster\",\n          field: \"poster\",\n          imageURL: props.model.posterURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Genres\",\n          nonSelected: nonSelectedGenres,\n          selected: selectedGenres,\n          onChange: (selected, nonSelected) => {\n            setSelectedGenres(selected);\n            setNonSelectedGenres(nonSelected);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MultipleSelector, {\n          displayName: \"Movie Theaters\",\n          nonSelected: nonSelectedMovieTheaters,\n          selected: selectedMovieTheaters,\n          onChange: (selected, nonSelected) => {\n            setSelectedMovieTheaters(selected);\n            setNonSelectedMovieTheaters(nonSelected);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TypeAheadActor, {\n          displayName: \"Actors\",\n          actors: selectedActors,\n          onAdd: actors => {\n            setSelectedActors(actors);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          className: \"btn btn-secondary\",\n          to: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(MovieForm, \"VA4OEwla848LQWicqcOCmMppDXQ=\");\n_c = MovieForm;\nvar _c;\n$RefreshReg$(_c, \"MovieForm\");","map":{"version":3,"names":["Form","Formik","Yup","TextField","DateField","ImageField","Button","Link","CheckboxField","MultipleSelector","useState","TypeAheadActor","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieForm","props","_s","selectedGenres","setSelectedGenres","mapToModel","nonSelectedGenres","setNonSelectedGenres","selectedMovieTheaters","setSelectedMovieTheaters","nonSelectedMovieTheaters","setNonSelectedMovieTheaters","selectedActors","setSelectedActors","items","map","item","key","id","value","name","children","initialValues","model","onSubmit","values","actions","genresIds","movieTheatersIds","validationSchema","object","title","string","required","firstLetterUppercase","formikProps","placeholder","undefined","onPointerEnterCapture","onPointerLeaveCapture","displayName","field","fileName","_jsxFileName","lineNumber","columnNumber","imageURL","posterURL","nonSelected","selected","onChange","actors","onAdd","disabled","isSubmitting","type","className","to","_c","$RefreshReg$"],"sources":["C:/Training/React-and-ASP.NET-Core/Module 6 - Forms/react-movies/src/movies/MovieForm.tsx"],"sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\r\nimport { movieCreationDTO } from \"./movies.module\";\r\nimport * as Yup from 'yup'\r\nimport TextField from \"../forms/TextField\";\r\nimport DateField from \"../forms/DateField\";\r\nimport ImageField from \"../forms/ImageField\";\r\nimport Button from \"../utils/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CheckboxField from \"../forms/CheckboxField\";\r\nimport MultipleSelector, { multipleSelectorModel } from \"../forms/MultipleSelector\";\r\nimport { ReactElement, useState } from \"react\";\r\nimport { genreDTO } from \"../genres/genres.model\";\r\nimport { movieTheaterDTO } from \"../movietheaters/movieTheater.model\";\r\nimport TypeAheadActor from \"../forms/TypeAheadActors\";\r\nimport { actorMovieDTO } from \"../actors/actors.model\";\r\n\r\nexport default function MovieForm(props: movieFormProps) {\r\n\r\n    const [selectedGenres, setSelectedGenres] = useState(mapToModel(props.selectedGenres));\r\n    const [nonSelectedGenres, setNonSelectedGenres] = useState(mapToModel(props.nonSelectedGenres));\r\n\r\n    const [selectedMovieTheaters, setSelectedMovieTheaters] = useState(mapToModel(props.selectedMovieTheaters));\r\n    const [nonSelectedMovieTheaters, setNonSelectedMovieTheaters] = useState(mapToModel(props.nonSelectedMovieTheaters));\r\n\r\n    const [selectedActors, setSelectedActors] = useState(props.selectedActors);\r\n\r\n    function mapToModel(items: { id: number, name: string }[]): multipleSelectorModel[] {\r\n        return items.map(item => {\r\n            return { key: item.id, value: item.name }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={props.model}\r\n                onSubmit={(values, actions) => {\r\n                    values.genresIds = selectedGenres.map(item => item.key);\r\n                    values.movieTheatersIds = selectedMovieTheaters.map(item => item.key);\r\n                    props.onSubmit(values, actions)\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    title: Yup.string().required('This field is required.').firstLetterUppercase()\r\n                })}\r\n            >\r\n                {(formikProps) => (\r\n                    <Form placeholder={undefined} onPointerEnterCapture={undefined} onPointerLeaveCapture={undefined}>\r\n                        \r\n                        <TextField displayName=\"Title\" field=\"title\" />\r\n                        <CheckboxField displayName=\"In Theaters\" field=\"inTheaters\" />\r\n                        <TextField displayName=\"Trailer\" field=\"trailer\" />\r\n                        <DateField displayName=\"Release Date\" field=\"releaseDate\" />\r\n                        <ImageField displayName=\"Poster\" field=\"poster\"\r\n                            imageURL={props.model.posterURL}\r\n                        />\r\n\r\n                        <MultipleSelector\r\n                            displayName=\"Genres\"\r\n                            nonSelected={nonSelectedGenres}\r\n                            selected={selectedGenres}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedGenres(selected);\r\n                                setNonSelectedGenres(nonSelected);\r\n                            }}\r\n                        />\r\n\r\n                        <MultipleSelector\r\n                            displayName=\"Movie Theaters\"\r\n                            nonSelected={nonSelectedMovieTheaters}\r\n                            selected={selectedMovieTheaters}\r\n                            onChange={(selected, nonSelected) => {\r\n                                setSelectedMovieTheaters(selected);\r\n                                setNonSelectedMovieTheaters(nonSelected);\r\n                            }}\r\n                        />\r\n\r\n                        <TypeAheadActor displayName=\"Actors\" actors={selectedActors} \r\n                            onAdd={actors => {\r\n                                setSelectedActors(actors);\r\n                            }}\r\n                        />\r\n\r\n                        <Button disabled={formikProps.isSubmitting}\r\n                            type='submit'>Save Changes</Button>\r\n                        <Link className=\"btn btn-secondary\" to=\"/genres\">Cancel</Link>\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\ninterface movieFormProps {\r\n    model: movieCreationDTO;\r\n    onSubmit(values: movieCreationDTO, actions: FormikHelpers<movieCreationDTO>): void;\r\n    selectedGenres: genreDTO[];\r\n    nonSelectedGenres: genreDTO[];\r\n    selectedMovieTheaters: movieTheaterDTO[];\r\n    nonSelectedMovieTheaters: movieTheaterDTO[];\r\n    selectedActors: actorMovieDTO[];\r\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,MAAM,QAAuB,QAAQ;AAEpD,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,gBAAgB,MAAiC,2BAA2B;AACnF,SAAuBC,QAAQ,QAAQ,OAAO;AAG9C,OAAOC,cAAc,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGtD,eAAe,SAASC,SAASA,CAACC,KAAqB,EAAE;EAAAC,EAAA;EAErD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAACW,UAAU,CAACJ,KAAK,CAACE,cAAc,CAAC,CAAC;EACtF,MAAM,CAACG,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGb,QAAQ,CAACW,UAAU,CAACJ,KAAK,CAACK,iBAAiB,CAAC,CAAC;EAE/F,MAAM,CAACE,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGf,QAAQ,CAACW,UAAU,CAACJ,KAAK,CAACO,qBAAqB,CAAC,CAAC;EAC3G,MAAM,CAACE,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGjB,QAAQ,CAACW,UAAU,CAACJ,KAAK,CAACS,wBAAwB,CAAC,CAAC;EAEpH,MAAM,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAACO,KAAK,CAACW,cAAc,CAAC;EAE1E,SAASP,UAAUA,CAACS,KAAqC,EAA2B;IAChF,OAAOA,KAAK,CAACC,GAAG,CAACC,IAAI,IAAI;MACrB,OAAO;QAAEC,GAAG,EAAED,IAAI,CAACE,EAAE;QAAEC,KAAK,EAAEH,IAAI,CAACI;MAAK,CAAC;IAC7C,CAAC,CAAC;EACN;EAEA,oBACIvB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,eACIxB,OAAA,CAACZ,MAAM;MACHqC,aAAa,EAAErB,KAAK,CAACsB,KAAM;MAC3BC,QAAQ,EAAEA,CAACC,MAAM,EAAEC,OAAO,KAAK;QAC3BD,MAAM,CAACE,SAAS,GAAGxB,cAAc,CAACY,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;QACvDQ,MAAM,CAACG,gBAAgB,GAAGpB,qBAAqB,CAACO,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC;QACrEhB,KAAK,CAACuB,QAAQ,CAACC,MAAM,EAAEC,OAAO,CAAC;MACnC,CAAE;MACFG,gBAAgB,EAAE3C,GAAG,CAAC4C,MAAM,CAAC;QACzBC,KAAK,EAAE7C,GAAG,CAAC8C,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,yBAAyB,CAAC,CAACC,oBAAoB,CAAC;MACjF,CAAC,CAAE;MAAAb,QAAA,EAEDc,WAAW,iBACTtC,OAAA,CAACb,IAAI;QAACoD,WAAW,EAAEC,SAAU;QAACC,qBAAqB,EAAED,SAAU;QAACE,qBAAqB,EAAEF,SAAU;QAAAhB,QAAA,gBAE7FxB,OAAA,CAACV,SAAS;UAACqD,WAAW,EAAC,OAAO;UAACC,KAAK,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC/ChD,OAAA,CAACL,aAAa;UAACgD,WAAW,EAAC,aAAa;UAACC,KAAK,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9DhD,OAAA,CAACV,SAAS;UAACqD,WAAW,EAAC,SAAS;UAACC,KAAK,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACnDhD,OAAA,CAACT,SAAS;UAACoD,WAAW,EAAC,cAAc;UAACC,KAAK,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5DhD,OAAA,CAACR,UAAU;UAACmD,WAAW,EAAC,QAAQ;UAACC,KAAK,EAAC,QAAQ;UAC3CK,QAAQ,EAAE7C,KAAK,CAACsB,KAAK,CAACwB;QAAU;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eAEFhD,OAAA,CAACJ,gBAAgB;UACb+C,WAAW,EAAC,QAAQ;UACpBQ,WAAW,EAAE1C,iBAAkB;UAC/B2C,QAAQ,EAAE9C,cAAe;UACzB+C,QAAQ,EAAEA,CAACD,QAAQ,EAAED,WAAW,KAAK;YACjC5C,iBAAiB,CAAC6C,QAAQ,CAAC;YAC3B1C,oBAAoB,CAACyC,WAAW,CAAC;UACrC;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEFhD,OAAA,CAACJ,gBAAgB;UACb+C,WAAW,EAAC,gBAAgB;UAC5BQ,WAAW,EAAEtC,wBAAyB;UACtCuC,QAAQ,EAAEzC,qBAAsB;UAChC0C,QAAQ,EAAEA,CAACD,QAAQ,EAAED,WAAW,KAAK;YACjCvC,wBAAwB,CAACwC,QAAQ,CAAC;YAClCtC,2BAA2B,CAACqC,WAAW,CAAC;UAC5C;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEFhD,OAAA,CAACF,cAAc;UAAC6C,WAAW,EAAC,QAAQ;UAACW,MAAM,EAAEvC,cAAe;UACxDwC,KAAK,EAAED,MAAM,IAAI;YACbtC,iBAAiB,CAACsC,MAAM,CAAC;UAC7B;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAEFhD,OAAA,CAACP,MAAM;UAAC+D,QAAQ,EAAElB,WAAW,CAACmB,YAAa;UACvCC,IAAI,EAAC,QAAQ;UAAAlC,QAAA,EAAC;QAAY;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvChD,OAAA,CAACN,IAAI;UAACiE,SAAS,EAAC,mBAAmB;UAACC,EAAE,EAAC,SAAS;UAAApC,QAAA,EAAC;QAAM;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE5D;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC,gBACX,CAAC;AAEX;AAAC3C,EAAA,CA3EuBF,SAAS;AAAA0D,EAAA,GAAT1D,SAAS;AAAA,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}