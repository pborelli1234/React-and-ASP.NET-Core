{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useCallback, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport Typeahead from '../core/Typeahead';\nimport { optionType } from '../propTypes';\nimport { getDisplayName, isFunction, warn } from '../utils';\nvar propTypes = {\n  /**\n   * Delay, in milliseconds, before performing search.\n   */\n  delay: PropTypes.number,\n  /**\n   * Whether or not a request is currently pending. Necessary for the\n   * container to know when new results are available.\n   */\n  isLoading: PropTypes.bool.isRequired,\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n  /**\n   * Callback to perform when the search is executed.\n   */\n  onSearch: PropTypes.func.isRequired,\n  /**\n   * Options to be passed to the typeahead. Will typically be the query\n   * results, but can also be initial default options.\n   */\n  options: PropTypes.arrayOf(optionType),\n  /**\n   * Message displayed in the menu when there is no user input.\n   */\n  promptText: PropTypes.node,\n  /**\n   * Message displayed in the menu while the request is pending.\n   */\n  searchText: PropTypes.node,\n  /**\n   * Whether or not the component should cache query results.\n   */\n  useCache: PropTypes.bool\n};\nvar defaultProps = {\n  delay: 200,\n  minLength: 2,\n  options: [],\n  promptText: 'Type to search...',\n  searchText: 'Searching...',\n  useCache: true\n};\n\n/**\n * Logic that encapsulates common behavior and functionality around\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Optional query caching\n *  - Search prompt and empty results behaviors\n */\nexport function useAsync(props) {\n  var allowNew = props.allowNew,\n    delay = props.delay,\n    emptyLabel = props.emptyLabel,\n    isLoading = props.isLoading,\n    minLength = props.minLength,\n    onInputChange = props.onInputChange,\n    onSearch = props.onSearch,\n    options = props.options,\n    promptText = props.promptText,\n    searchText = props.searchText,\n    useCache = props.useCache,\n    otherProps = _objectWithoutPropertiesLoose(props, [\"allowNew\", \"delay\", \"emptyLabel\", \"isLoading\", \"minLength\", \"onInputChange\", \"onSearch\", \"options\", \"promptText\", \"searchText\", \"useCache\"]);\n  var cacheRef = useRef({});\n  var handleSearchDebouncedRef = useRef();\n  var queryRef = useRef(props.defaultInputValue || '');\n  var forceUpdate = useForceUpdate();\n  var prevProps = usePrevious(props);\n  var handleSearch = useCallback(function (query) {\n    queryRef.current = query;\n    if (!query || minLength && query.length < minLength) {\n      return;\n    } // Use cached results, if applicable.\n\n    if (useCache && cacheRef.current[query]) {\n      // Re-render the component with the cached results.\n      forceUpdate();\n      return;\n    } // Perform the search.\n\n    onSearch(query);\n  }, [forceUpdate, minLength, onSearch, useCache]); // Set the debounced search function.\n\n  useEffect(function () {\n    handleSearchDebouncedRef.current = debounce(handleSearch, delay);\n    return function () {\n      handleSearchDebouncedRef.current && handleSearchDebouncedRef.current.cancel();\n    };\n  }, [delay, handleSearch]);\n  useEffect(function () {\n    // Ensure that we've gone from a loading to a completed state. Otherwise\n    // an empty response could get cached if the component updates during the\n    // request (eg: if the parent re-renders for some reason).\n    if (!isLoading && prevProps && prevProps.isLoading && useCache) {\n      cacheRef.current[queryRef.current] = options;\n    }\n  });\n  var getEmptyLabel = function getEmptyLabel() {\n    if (!queryRef.current.length) {\n      return promptText;\n    }\n    if (isLoading) {\n      return searchText;\n    }\n    return emptyLabel;\n  };\n  var handleInputChange = useCallback(function (query, e) {\n    onInputChange && onInputChange(query, e);\n    handleSearchDebouncedRef.current && handleSearchDebouncedRef.current(query);\n  }, [onInputChange]);\n  var cachedQuery = cacheRef.current[queryRef.current];\n  return _extends({}, otherProps, {\n    // Disable custom selections during a search if `allowNew` isn't a function.\n    allowNew: isFunction(allowNew) ? allowNew : allowNew && !isLoading,\n    emptyLabel: getEmptyLabel(),\n    isLoading: isLoading,\n    minLength: minLength,\n    onInputChange: handleInputChange,\n    options: useCache && cachedQuery ? cachedQuery : options\n  });\n}\nexport function withAsync(Component) {\n  var AsyncTypeahead = /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, useAsync(props), {\n      ref: ref\n    }));\n  });\n  AsyncTypeahead.displayName = \"withAsync(\" + getDisplayName(Component) + \")\"; // $FlowFixMe\n\n  AsyncTypeahead.propTypes = propTypes; // $FlowFixMe\n\n  AsyncTypeahead.defaultProps = defaultProps;\n  return AsyncTypeahead;\n}\nexport default function asyncContainer(Component) {\n  /* istanbul ignore next */\n  warn(false, 'The `asyncContainer` export is deprecated; use `withAsync` instead.');\n  /* istanbul ignore next */\n\n  return withAsync(Component);\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","debounce","PropTypes","React","forwardRef","useCallback","useEffect","useRef","useForceUpdate","usePrevious","Typeahead","optionType","getDisplayName","isFunction","warn","propTypes","delay","number","isLoading","bool","isRequired","minLength","onSearch","func","options","arrayOf","promptText","node","searchText","useCache","defaultProps","useAsync","props","allowNew","emptyLabel","onInputChange","otherProps","cacheRef","handleSearchDebouncedRef","queryRef","defaultInputValue","forceUpdate","prevProps","handleSearch","query","current","length","cancel","getEmptyLabel","handleInputChange","e","cachedQuery","withAsync","Component","AsyncTypeahead","ref","createElement","displayName","asyncContainer"],"sources":["C:/Training/React-and-ASP.NET-Core/Module 6 - Forms/react-movies/node_modules/react-bootstrap-typeahead/es/behaviors/async.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useCallback, useEffect, useRef } from 'react';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport Typeahead from '../core/Typeahead';\nimport { optionType } from '../propTypes';\nimport { getDisplayName, isFunction, warn } from '../utils';\nvar propTypes = {\n  /**\n   * Delay, in milliseconds, before performing search.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * Whether or not a request is currently pending. Necessary for the\n   * container to know when new results are available.\n   */\n  isLoading: PropTypes.bool.isRequired,\n\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * Callback to perform when the search is executed.\n   */\n  onSearch: PropTypes.func.isRequired,\n\n  /**\n   * Options to be passed to the typeahead. Will typically be the query\n   * results, but can also be initial default options.\n   */\n  options: PropTypes.arrayOf(optionType),\n\n  /**\n   * Message displayed in the menu when there is no user input.\n   */\n  promptText: PropTypes.node,\n\n  /**\n   * Message displayed in the menu while the request is pending.\n   */\n  searchText: PropTypes.node,\n\n  /**\n   * Whether or not the component should cache query results.\n   */\n  useCache: PropTypes.bool\n};\nvar defaultProps = {\n  delay: 200,\n  minLength: 2,\n  options: [],\n  promptText: 'Type to search...',\n  searchText: 'Searching...',\n  useCache: true\n};\n\n/**\n * Logic that encapsulates common behavior and functionality around\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Optional query caching\n *  - Search prompt and empty results behaviors\n */\nexport function useAsync(props) {\n  var allowNew = props.allowNew,\n      delay = props.delay,\n      emptyLabel = props.emptyLabel,\n      isLoading = props.isLoading,\n      minLength = props.minLength,\n      onInputChange = props.onInputChange,\n      onSearch = props.onSearch,\n      options = props.options,\n      promptText = props.promptText,\n      searchText = props.searchText,\n      useCache = props.useCache,\n      otherProps = _objectWithoutPropertiesLoose(props, [\"allowNew\", \"delay\", \"emptyLabel\", \"isLoading\", \"minLength\", \"onInputChange\", \"onSearch\", \"options\", \"promptText\", \"searchText\", \"useCache\"]);\n\n  var cacheRef = useRef({});\n  var handleSearchDebouncedRef = useRef();\n  var queryRef = useRef(props.defaultInputValue || '');\n  var forceUpdate = useForceUpdate();\n  var prevProps = usePrevious(props);\n  var handleSearch = useCallback(function (query) {\n    queryRef.current = query;\n\n    if (!query || minLength && query.length < minLength) {\n      return;\n    } // Use cached results, if applicable.\n\n\n    if (useCache && cacheRef.current[query]) {\n      // Re-render the component with the cached results.\n      forceUpdate();\n      return;\n    } // Perform the search.\n\n\n    onSearch(query);\n  }, [forceUpdate, minLength, onSearch, useCache]); // Set the debounced search function.\n\n  useEffect(function () {\n    handleSearchDebouncedRef.current = debounce(handleSearch, delay);\n    return function () {\n      handleSearchDebouncedRef.current && handleSearchDebouncedRef.current.cancel();\n    };\n  }, [delay, handleSearch]);\n  useEffect(function () {\n    // Ensure that we've gone from a loading to a completed state. Otherwise\n    // an empty response could get cached if the component updates during the\n    // request (eg: if the parent re-renders for some reason).\n    if (!isLoading && prevProps && prevProps.isLoading && useCache) {\n      cacheRef.current[queryRef.current] = options;\n    }\n  });\n\n  var getEmptyLabel = function getEmptyLabel() {\n    if (!queryRef.current.length) {\n      return promptText;\n    }\n\n    if (isLoading) {\n      return searchText;\n    }\n\n    return emptyLabel;\n  };\n\n  var handleInputChange = useCallback(function (query, e) {\n    onInputChange && onInputChange(query, e);\n    handleSearchDebouncedRef.current && handleSearchDebouncedRef.current(query);\n  }, [onInputChange]);\n  var cachedQuery = cacheRef.current[queryRef.current];\n  return _extends({}, otherProps, {\n    // Disable custom selections during a search if `allowNew` isn't a function.\n    allowNew: isFunction(allowNew) ? allowNew : allowNew && !isLoading,\n    emptyLabel: getEmptyLabel(),\n    isLoading: isLoading,\n    minLength: minLength,\n    onInputChange: handleInputChange,\n    options: useCache && cachedQuery ? cachedQuery : options\n  });\n}\nexport function withAsync(Component) {\n  var AsyncTypeahead = /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(Component, _extends({}, useAsync(props), {\n      ref: ref\n    }));\n  });\n  AsyncTypeahead.displayName = \"withAsync(\" + getDisplayName(Component) + \")\"; // $FlowFixMe\n\n  AsyncTypeahead.propTypes = propTypes; // $FlowFixMe\n\n  AsyncTypeahead.defaultProps = defaultProps;\n  return AsyncTypeahead;\n}\nexport default function asyncContainer(Component) {\n  /* istanbul ignore next */\n  warn(false, 'The `asyncContainer` export is deprecated; use `withAsync` instead.');\n  /* istanbul ignore next */\n\n  return withAsync(Component);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}